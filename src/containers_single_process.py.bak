"""
Dependency Injection Container

This module defines a dependency injection container using the `dependency-injector`
library. It centralizes the instantiation and wiring of services, making it
easy to manage dependencies and share service instances across the application
(both CLI and API).
"""

import sqlite3
import threading

from dependency_injector import containers, providers

from .analysis.hourly_performance_analyzer import HourlyAnalyzer
from .config import settings
from .jobs.bulk_data_synchronizer import BulkDataSynchronizer
from .services.analysis_service import AnalysisService
from .services.data_aggregation_service import DataAggregationService
from .services.database import Database
from .services.gsc_client import GSCClient
from .services.hourly_database import HourlyDatabase
from .services.site_service import SiteService


class Container(containers.DeclarativeContainer):
    """應用程式依賴注入容器"""

    # --- Configuration Provider ---
    # 將 Pydantic 設定模型包裝成一個提供者，以便在整個容器中注入設定值
    config = providers.Configuration()
    config.from_dict(settings.model_dump())

    # --- Core Services ---
    # 1. 創建一個全域唯一的 lock 實例 (使用 RLock 避免死鎖)
    db_lock = providers.Singleton(threading.RLock)

    # 2. 創建一個全域唯一的資料庫連接資源
    #    使用 Singleton provider 確保整個應用程式生命週期中只有一個連接。
    #    在多線程環境下共享連接時需要 check_same_thread=False
    db_connection = providers.Singleton(
        sqlite3.connect,
        config.paths.database_path,
        check_same_thread=False,
        timeout=30.0,  # 增加超時時間以避免鎖定錯誤
    )

    # 3. 設置 row_factory 以便將行轉換為字典
    db_connection.add_attributes(row_factory=sqlite3.Row)

    # 4. 將創建好的 lock 和 connection 注入到 Database 服務中
    database = providers.Singleton(
        Database,
        connection=db_connection,
        lock=db_lock,
    )

    gsc_client = providers.Singleton(
        GSCClient,
        db=database,
    )

    site_service = providers.Singleton(
        SiteService,
        db=database,
        gsc_client=gsc_client,
    )

    # 5. 重構 HourlyDatabase 服務，注入 Database 和 GSCClient
    hourly_data_service = providers.Singleton(
        HourlyDatabase,
        db=database,
        gsc_client=gsc_client,
    )

    # --- Analysis & Job Services ---
    analysis_service = providers.Singleton(
        AnalysisService,
        db=database,
    )

    bulk_data_synchronizer = providers.Singleton(
        BulkDataSynchronizer,
        db=database,
        gsc_client=gsc_client,
    )

    hourly_performance_analyzer = providers.Singleton(
        HourlyAnalyzer,
        db=database,
    )

    data_aggregation_service = providers.Singleton(
        DataAggregationService,
        database=database,
    )
